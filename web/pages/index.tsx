import type { GetServerSideProps, NextPage } from 'next'
import { useRouter } from 'next/router'
import Head from 'next/head'
import Image from 'next/image'
import { useContext, useReducer, useState } from 'react'
import { useForm } from 'react-hook-form'
import { useAuth } from '../contexts/auth'
import { IUser } from '../interfaces/User'
import Cookies from 'js-cookie'
import LoadingSpinner from '../components/LoadingSpinner'

function reducer(state, action) {
  switch (action.type) {
    case 'LOGIN_REQUEST': return { ...state, loading: true, error: '' };
    case 'LOGIN_SUCCESS': return { ...state, loading: false, error: '' };
    case 'LOGIN_FAIL': return { ...state, loading: false, error: action.payload };
    case 'LOGIN_RESET': return { ...state, loading: false, error: '' }
    default: return { state }
  }
}

const Home: NextPage = () => {
  const router = useRouter()
  const { register, handleSubmit } = useForm()
  const { Login } = useAuth()
  const [{ loading, error }, dispatch] = useReducer(reducer, {
    loading: false,
    error: ''
  })

  const onSubmit = handleSubmit(async (data) => {

    dispatch({ type: 'LOGIN_REQUEST' })
    try {
      await Login(data.username, data.password)
      dispatch({ type: 'LOGIN_SUCCESS' })
    } catch (err) {
      dispatch({ type: 'LOGIN_FAIL', payload: 'Username or password incorrect' })
      setTimeout(() => {
        dispatch({ type: 'LOGIN_RESET' })
      }, 5000)
    }
  });

  return (
    <div>
      <Head>
        <title>Next - Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="grid grid-cols-12 h-screen">
        <div className="col-span-6 bg-blue-300 h-full" style={{ background: "url('https://images.unsplash.com/photo-1636653166975-7c4c880bbe62?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=580&q=80') no-repeat 50% 50%", backgroundSize: '700px' }}></div>
        <div className="col-span-6">
          <div className="flex justify-center m-auto flex-col py-2 px-3 max-w-sm h-full">
            <div>
              <p className="text-gray-400">Welcome back</p>
              <h1 className="text-3xl font-bold">Login to your account</h1>
              {error && (
                <div className="rounded flex w-full h-12 bg-red-400 text-white mt-2 mb-2">
                  <p className="m-auto">{error}</p>
                </div>
              )}
              <form className="w-full" onSubmit={onSubmit}>
                <div className="flex flex-col">
                  <label htmlFor="username">Username</label>
                  <input {...register('username')} className="rounded border-2 border-gray-300 py-2 px-3" type="text" name="username" id="username" placeholder="Username" />
                  <label htmlFor="password">Password</label>
                  <input {...register('password')} className="rounded border-2 border-gray-300 py-2 px-3" type="password" name="password" id="password" placeholder="Password" />
                  <div className="flex items-center justify-between mt-2">
                    <label className="inline-flex items-center mt-3">
                      <input type="checkbox" className="form-checkbox h-5 w-5 text-green-600" /><span className="ml-2 text-gray-700">Remember me</span>
                    </label>
                    <div>
                      <a className="text-blue-500" href="#">Forgot password?</a>
                    </div>
                  </div>
                  <button className="rounded bg-green-400 py-2 px-3 flex-1 text-white font-semibold mt-2">{loading ? <LoadingSpinner width={8} height={8} /> : 'Login now'}</button>
                </div>
              </form>
            </div>
            <footer className="mt-2">
              <p>Dont have an account? <a href="#" className="text-blue-500">Sign up for free</a></p>
            </footer>
          </div>
        </div>
      </main>
    </div>
  )
}
export default Home
